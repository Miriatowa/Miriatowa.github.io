<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Cookie、sessionStorage和localStorage的区别</title>
    <url>/2020/04/29/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E4%BA%8C/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="1、共同点"><a href="#1、共同点" class="headerlink" title="1、共同点"></a>1、共同点</h2><p>   都是保存在浏览器端，并且是同源的</p>
<h2 id="2、不同点"><a href="#2、不同点" class="headerlink" title="2、不同点"></a>2、不同点</h2><h4 id="Cookie："><a href="#Cookie：" class="headerlink" title="Cookie："></a>Cookie：</h4><pre><code>cookie(存储量小,4k左右)数据始终在同源的http请求中携带,在浏览器和服务端来回传递,sessionStorage和localStorage仅在本地保存.</code></pre><h4 id="sessionStorage："><a href="#sessionStorage：" class="headerlink" title="sessionStorage："></a>sessionStorage：</h4><pre><code>仅在当前浏览器窗口关闭前有效，自然也不可能持久保持。</code></pre><h4 id="localStroage："><a href="#localStroage：" class="headerlink" title="localStroage："></a>localStroage：</h4><pre><code>始终有效，窗口或者浏览器关闭也一直保存;cookie只在窗口或者浏览器关闭之前有。localStorage和cooike在所有同源窗口都是共享的。</code></pre>]]></content>
      <categories>
        <category>前端基础</category>
      </categories>
      <tags>
        <tag>路线</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>2020前端面试题（css篇）</title>
    <url>/2020/04/01/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98(CSS)/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="css水平、垂直居中的写法，请至少写出4种？"><a href="#css水平、垂直居中的写法，请至少写出4种？" class="headerlink" title="css水平、垂直居中的写法，请至少写出4种？"></a>css水平、垂直居中的写法，请至少写出4种？</h2><blockquote>
<p>这题考察的是css的基础知识是否全面，平时多加积累</p>
</blockquote>
<p>   水平居中</p>
<ol>
<li>行内元素：<code>text-align: center</code></li>
<li>块级元素：<code>margin：0 auto</code></li>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">position:absolute;</span><br><span class="line">left:50%;</span><br><span class="line">transform:translateX(-50%)</span><br></pre></td></tr></table></figure></li>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">display:flex;</span><br><span class="line">justify-content:center</span><br></pre></td></tr></table></figure>
垂直居中<ol>
<li>设置<code>line-height：height</code></li>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">position:absolute;</span><br><span class="line">top:50%;</span><br><span class="line">transform:translateY(-50%)</span><br></pre></td></tr></table></figure></li>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">   display:table;</span><br><span class="line">display:table-cell</span><br><span class="line">vertical-align:middle</span><br></pre></td></tr></table></figure></li>
<li><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">display:flex;</span><br><span class="line">align-items:center</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ol>
<h2 id="calc，support，nedia各自的含义及用法？"><a href="#calc，support，nedia各自的含义及用法？" class="headerlink" title="calc，support，nedia各自的含义及用法？"></a>calc，support，nedia各自的含义及用法？</h2><p>   @support主要用于检测浏览器是否支持CSS的某个属性，其实就是判断条件，如果支持<br>某个属性，你可以写一套样式;如果不支持某个样式，你也可以提供另外一套样式做替补<br>   calc()函数用于动态计算长度值。calc()函数支持”+”,”-“,”*”,”/“运算<br>   @media查询，你可以针对不同的媒体类型定义不同的样式</p>
<h2 id="1rem、1em、1vh、1px、1rpx各自代表的含义？"><a href="#1rem、1em、1vh、1px、1rpx各自代表的含义？" class="headerlink" title="1rem、1em、1vh、1px、1rpx各自代表的含义？"></a>1rem、1em、1vh、1px、1rpx各自代表的含义？</h2><h3 id="1、rem"><a href="#1、rem" class="headerlink" title="1、rem"></a>1、rem</h3><p>   rem是全部的长度都相对于根元素<html>元素。通常做法是给html元素设置一个字体<br>大小，然后其他元素的长度单位就是rem。</p>
<h3 id="2、vw-vh"><a href="#2、vw-vh" class="headerlink" title="2、vw/vh"></a>2、vw/vh</h3><p>   全称是Viewport Width和Viewport Height，视窗的宽度和高度，相当于屏幕宽度和<br>高度的1%，不过，处理宽度的时候%单位更合适，处理高度的话vh单位更好</p>
<h3 id="3、px"><a href="#3、px" class="headerlink" title="3、px"></a>3、px</h3><p>   px像素。相对长度单位。像素px是相对于显示器屏幕分辨率而言的</p>
<h3 id="4、rpx"><a href="#4、rpx" class="headerlink" title="4、rpx"></a>4、rpx</h3><p>   rpx 是微信小程序解决自适应屏幕尺寸的尺寸单位。微信小程序规定屏幕的宽度为750rpx。</p>
<h3 id="5、em"><a href="#5、em" class="headerlink" title="5、em"></a>5、em</h3><ul>
<li>子元素字体大小的em是相对于父元素字体大小</li>
<li>元素的width/height/padding/margin用em的话是相对于该元素的font-size</li>
</ul>
<h2 id="说说盒模型？"><a href="#说说盒模型？" class="headerlink" title="说说盒模型？"></a>说说盒模型？</h2><h3 id="盒模型的组成是css中重要的基础知识，也是必考的基础知识"><a href="#盒模型的组成是css中重要的基础知识，也是必考的基础知识" class="headerlink" title="盒模型的组成是css中重要的基础知识，也是必考的基础知识"></a>盒模型的组成是css中重要的基础知识，也是必考的基础知识</h3><p>   盒模型组成：<br>   *content：内容<br>   *padding：内边距<br>   *border：边框<br>   *margin：外边距<br>   由里向外，在标准的盒子模型中，width指content部分的宽度，box-sizing的<br> 默认属性content-box<br>   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">box-sizing:content-box   W3C盒子模型</span><br><span class="line">box-siezing:border-box   IE盒子模型</span><br></pre></td></tr></table></figure></p>
<h2 id="清除浮动的几种方式，及原理"><a href="#清除浮动的几种方式，及原理" class="headerlink" title="清除浮动的几种方式，及原理"></a>清除浮动的几种方式，及原理</h2><blockquote>
<p>清除浮动简单，但这题要引出的是BFC   </p>
</blockquote>
<ul>
<li><code>::after / &lt;br&gt;  /  clear:both</code></li>
<li>创建父级 BFC（overflow:hidden）</li>
<li>父级设置高度<blockquote>
<p>BFC(块级格式化上下文)，是一个独立的渲染区域，让处于BFC内部的元素和外部的<br>元素相互隔离，使内外元素的定位不会相互影响</p>
</blockquote>
</li>
</ul>
<p>触发条件：</p>
<ul>
<li>根元素</li>
<li><code>position：absolute/fixed</code></li>
<li><code>display；inline-block/table</code></li>
<li>float元素</li>
<li>overflow ！== visiable<br>规则：</li>
<li>属于同一个BFC的两个相邻Box垂直排列</li>
<li>属于同一个BFC的两个相邻Box的margin会发生重叠</li>
<li>BFC的区域不会与float的元素区域重叠</li>
<li>计算BFC的高度时，浮动子元素也参与计算</li>
<li>文字层不会被浮动层覆盖，环绕于周围</li>
</ul>
]]></content>
      <categories>
        <category>前端基础</category>
      </categories>
      <tags>
        <tag>面试题</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>2020前端面试题（js篇）</title>
    <url>/2020/06/01/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98(JS)/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="遍历A节点的父节点的所有子节点"><a href="#遍历A节点的父节点的所有子节点" class="headerlink" title="遍历A节点的父节点的所有子节点"></a>遍历A节点的父节点的所有子节点</h2><blockquote>
<p>这题考察原生的js操作dom，属于非常简单的基础题，但长时间使用mvvm框架，可能会忘记</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	var b&#x3D;document.getElementById(&quot;a&quot;).parentNode.children;</span><br><span class="line">	consloe.log(b)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="javascript中apply、call和bind的区别"><a href="#javascript中apply、call和bind的区别" class="headerlink" title="javascript中apply、call和bind的区别"></a>javascript中apply、call和bind的区别</h2><blockquote>
<p>在JS中，这三者都是用来改变函数的this对象的指向的，他们有什么样的区别呢</p>
</blockquote>
<h3 id="相似的地方"><a href="#相似的地方" class="headerlink" title="相似的地方"></a>相似的地方</h3><ol>
<li>都是用来改变函数的this对象的指向的。</li>
<li>第一个参数都是this要指向的对象。</li>
<li>都可以利用后续参数传参。<h3 id="区别的地方"><a href="#区别的地方" class="headerlink" title="区别的地方"></a>区别的地方</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  var person &#x3D; &#123;</span><br><span class="line">                         name : &quot;小王&quot;,</span><br><span class="line">                         gender : &quot;男&quot;,</span><br><span class="line">                         age : 24,</span><br><span class="line">                         say : function(school,grade) &#123;</span><br><span class="line">                                 alert(this.name + &quot; , &quot; + this.gender + &quot; ,今年&quot; + this.age + &quot; ,在&quot; + school + &quot;上&quot; + grade);                                </span><br><span class="line">                         &#125;</span><br><span class="line">                 &#125;</span><br><span class="line">   var student &#x3D; &#123;</span><br><span class="line">           name : &quot;小红&quot;,</span><br><span class="line">           gender : &quot;女&quot;,</span><br><span class="line">           age : 18</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">person.say.call(student,&quot;实验小学&quot;,&quot;六年级&quot;)</span><br><span class="line">person.say.apply(student,[&quot;实验小学&quot;,&quot;六年级&quot;])</span><br><span class="line">person.say.bind(student)(&quot;实验小学&quot;,&quot;六年级&quot;)</span><br></pre></td></tr></table></figure>
call后面的参数与say方法中是一一对应的，而apply的第二个参数是一个数组，<br>数组中的元素是和say方法中一一对应的，这就是两者最大的区别。但是由于bind返<br>回的仍然是一个函数，所以我们还可以在调用的时候再进行传参。<h2 id="对于闭包函数的理解"><a href="#对于闭包函数的理解" class="headerlink" title="对于闭包函数的理解"></a>对于闭包函数的理解</h2><blockquote>
<p>《Javascript高级程序设计》上对闭包的定义是：有权限访问另一个函数作用域中的变量的函数。<br>js作用域环境中访问变量的权利是由内向外的，内部作用域可以获得当前作用域下的变量并且可以获<br>得当前包含当前作用域的外层作用域下的变量,那么我们想在一个函数内部也有限权访问另一个函数内部<br>的变量该怎么办呢？闭包就是用来解决这一需求的，闭包的本质就是在一个函数内部创建另一个函数。</p>
</blockquote>
<h3 id="闭包的结构"><a href="#闭包的结构" class="headerlink" title="闭包的结构"></a>闭包的结构</h3></li>
</ol>
<ul>
<li>函数嵌套函数</li>
<li>外层函数有局部变量</li>
<li>里层函数使用了外层函数的局部变量</li>
<li>里层函数可被反复调用<h3 id="闭包实例"><a href="#闭包实例" class="headerlink" title="闭包实例"></a>闭包实例</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function closures()&#123;</span><br><span class="line"> var name&#x3D;&quot;closureFn&quot;</span><br><span class="line"> function callFn()&#123;</span><br><span class="line">  alert(&#96;我是$&#123;name&#125;函数&#96;)</span><br><span class="line"> &#125;</span><br><span class="line"> return callFn  </span><br><span class="line">&#125; </span><br><span class="line">var fn&#x3D;closures()</span><br><span class="line">console.log(fn())</span><br></pre></td></tr></table></figure>
<h3 id="总结闭包的好处与坏处"><a href="#总结闭包的好处与坏处" class="headerlink" title="总结闭包的好处与坏处"></a>总结闭包的好处与坏处</h3><h4 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h4></li>
</ul>
<ul>
<li><p>保护函数内的变量安全 ，实现封装，防止变量流入其他环境发生命名冲突</p>
</li>
<li><p>在内存中维持一个变量，可以做缓存（但使用多了同时也是一项缺点，消耗内存）</p>
</li>
<li><p>匿名自执行函数可以减少内存消耗</p>
<h4 id="坏处"><a href="#坏处" class="headerlink" title="坏处"></a>坏处</h4></li>
<li><p>其中一点上面已经有体现了，就是被引用的私有变量不能被销毁，增大了内存消耗，造成<br>内存泄漏，解决方法是可以在使用完变量后手动为它赋值为null；</p>
</li>
<li><p>其次由于闭包涉及跨域访问，所以会导致性能损失，我们可以通过把跨作用域变量存储在局<br>部变量中，然后直接访问局部变量，来减轻对执行速度的影响</p>
</li>
</ul>
]]></content>
      <categories>
        <category>前端基础</category>
      </categories>
      <tags>
        <tag>面试题</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>日常问题</title>
    <url>/2020/03/01/%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="文本溢出显示省略号"><a href="#文本溢出显示省略号" class="headerlink" title="文本溢出显示省略号"></a>文本溢出显示省略号</h2><p>  ###单行文本<br>  <figure class="highlight plain"><figcaption><span>hidden;</span></figcaption><table><tr><td class="code"><pre><span class="line">text-overflow:ellipsis;</span><br><span class="line">white-space: nowrap;</span><br></pre></td></tr></table></figure><br>  ###多行文本<br>  <figure class="highlight plain"><figcaption><span>-webkit-box;</span></figcaption><table><tr><td class="code"><pre><span class="line">-webkit-box-orient: vertical;</span><br><span class="line">-webkit-line-clamp: 3;</span><br><span class="line">overflow: hidden;</span><br></pre></td></tr></table></figure></p>
<h2 id="小程序input、textarea层级穿透问题"><a href="#小程序input、textarea层级穿透问题" class="headerlink" title="小程序input、textarea层级穿透问题"></a>小程序input、textarea层级穿透问题</h2><p>当页面中有input、textarea时，底部提交按钮<code>position：fixed</code>悬浮时，placeholder<br>会穿透到提交按钮的上方，设置z-index在真机上无效<br><img src="https://ae01.alicdn.com/kf/H4e304773bea3445085a8e68758bf6175d.jpg" alt="RUNOOB 图标" loading="lazy"></p>
<p>解决方法：</p>
<ul>
<li>使用if，当触发按钮时隐藏textarea或者input组件，需求完成时在显示input或者textarea</li>
<li>使用cover-view和cover-image组件代替view、image，cover-view和cover-image组件可以<br>覆盖在部分原生组件上面<h2 id="小程序自定义组件使用动画的坑"><a href="#小程序自定义组件使用动画的坑" class="headerlink" title="小程序自定义组件使用动画的坑"></a>小程序自定义组件使用动画的坑</h2>主包内需要在onReady里面去wx.createAnimation么，但是在自定义组件中要去created中<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">created() &#123;</span><br><span class="line">	var animation &#x3D; uni.createAnimation(&#123;</span><br><span class="line">			transformOrigin: &quot;100% 80%&quot;,</span><br><span class="line">	  		duration: 1000,</span><br><span class="line">	   		timingFunction: &#39;ease&#39;,</span><br><span class="line">	&#125;)</span><br><span class="line">	</span><br><span class="line">	this.animation &#x3D; animation</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>前端项目</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>问题</tag>
      </tags>
  </entry>
  <entry>
    <title>2020前端面试题（html篇）</title>
    <url>/2020/06/24/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98(HTML)/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="说一下标签的用法"><a href="#说一下标签的用法" class="headerlink" title="说一下标签的用法"></a>说一下<label>标签的用法</h2><pre><code>label标签主要是方便鼠标点击使用，扩大可点击范围，增强用户体验</code></pre><h2 id="1、http和https的区别"><a href="#1、http和https的区别" class="headerlink" title="1、http和https的区别"></a>1、http和https的区别</h2><p>   http传输的数据是明文的(未加密)，而https协议室友http和ssl协议构建的可进行加密传输和身份<br>认证的网络协议，比http协议安全性更高。主要区别：</p>
<ul>
<li>一、https协议需要ca证书，费用较高</li>
<li>二、http为明文传输，https为ssl加密传输协议(更安全)</li>
<li>三、http的连接很简单，是无状态的；https协议是由ssl+http协议构建的可进行加密传输、身份认证的协议，更安全</li>
</ul>
]]></content>
      <categories>
        <category>前端基础</category>
      </categories>
      <tags>
        <tag>面试题</tag>
        <tag>前端</tag>
        <tag>html</tag>
      </tags>
  </entry>
</search>
